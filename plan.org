#+TITLE: Orders Plan
#+AUTHOR:    William Clifford
#+EMAIL:     will@wobh.org
#+DATE:      2021-11-13 Sat
#+startup: overview

* [0/10] Permutations
:PROPERTIES:
:COOKIE_DATA: todo recursive
:END:

** TODO improve interface

Seems like this could be improved.

- ~make-index-map       : sequence -> index-mapping-list~
- ~make-index-cycles    : sequence -> equality-function -> sorting-function -> cycles-list~
- ~make-permuter        : index-cycles-list -> permuter-function~
- ~compose-index-cycles : index-cycles-list -> index-cycles-list -> index-cycles-list~
- ~cycle-permuter       : permuter-function -> sequence -> permutations-list~
- ~map-permuters        : sequence -> [permuter-functions] -> permutations-list~

one-line (index-map) vs cycle (index-cycles) notation

** [0/2] use ~reduce~ instead of ~loop~

It looks like I might be able to translate at least some of these
loops into reductions.

*** TODO ~make-index-cycles~
*** TODO ~make-permuter~
#+begin_src lisp
  (let ((sequence '(0 1 2 3 4))
	(cycles '((0 4 1) (2 3))))
    (flet ((permute (acc elt)
	     (if (< 1 (length elt))
		 () ;; TODO
		 acc)))
      (reduce permute cycles)))
#+end_src

** [0/2] decompose index-cycles into index-transpositions

Should be able to compose transpositions into the cycle.

Two kinds:

*** TODO distant

: (1 3 2 5 7)(6 8) = (1 3)(2 3)(2 5)(5 7)(6 8)

*** TODO adjacent

: (1 3 2 5 7)(6 8) = (2 3)(1 2)(4 5)(3 4)(2 3)(3 4)(4 5)(6 7)(5 6)(7 8)(6 7)

** [0/4] Orderings
*** TODO Lexicographic
#+name: n-4-lexicographic
#+begin_src lisp
  '((#\a #\b #\c #\d)
    (#\a #\b #\d #\c)
    (#\a #\c #\b #\d)
    (#\a #\c #\d #\b)
    (#\a #\d #\b #\c)
    (#\a #\d #\c #\b)

    (#\b #\a #\c #\d)
    (#\b #\a #\d #\c)
    (#\b #\c #\a #\d)
    (#\b #\c #\d #\a)
    (#\b #\d #\a #\c)
    (#\b #\d #\c #\a)

    (#\c #\a #\b #\d)
    (#\c #\a #\d #\b)
    (#\c #\b #\a #\d)
    (#\c #\b #\a #\d)
    (#\c #\d #\a #\b)
    (#\c #\d #\a #\b)

    (#\d #\a #\b #\c)
    (#\d #\a #\c #\b)
    (#\d #\b #\a #\c)
    (#\d #\b #\c #\a)
    (#\d #\c #\a #\b)
    (#\d #\c #\b #\a))
#+end_src

*** TODO Plain
A.K.A. Steinhaus–Johnson–Trotter
#+name: n-4-plain
#+begin_src lisp
  '((#\a #\b #\c #\d)
    (#\a #\b #\d #\c)
    (#\a #\d #\b #\c)
    (#\d #\a #\b #\c)

    (#\d #\a #\c #\b)
    (#\a #\d #\c #\b)
    (#\a #\c #\d #\b)
    (#\a #\c #\b #\d)

    (#\c #\a #\b #\d)
    (#\c #\a #\d #\b)
    (#\c #\d #\a #\b)
    (#\d #\c #\a #\b)

    (#\d #\c #\b #\a)
    (#\c #\d #\b #\a)
    (#\c #\b #\d #\a)
    (#\c #\b #\a #\d)

    (#\b #\c #\a #\d)
    (#\b #\c #\d #\a)
    (#\b #\d #\c #\a)
    (#\d #\b #\c #\a)

    (#\d #\b #\a #\c)
    (#\b #\d #\a #\c)
    (#\b #\a #\d #\c)
    (#\b #\a #\c #\d))
#+end_src

*** TODO (minimal, speedy)
A.K.A. Heap
#+name: n-4-?
#+begin_src lisp
  '((#\a #\b #\c #\d)
    (#\b #\a #\c #\d)
    (#\c #\a #\b #\d)
    (#\a #\c #\b #\d)
    (#\b #\c #\a #\d)
    (#\c #\b #\a #\d)

    (#\d #\b #\a #\c)
    (#\b #\d #\a #\c)
    (#\a #\d #\b #\c)
    (#\d #\a #\b #\c)
    (#\b #\a #\d #\c)
    (#\a #\b #\d #\c)

    (#\a #\c #\d #\b)
    (#\c #\a #\d #\b)
    (#\d #\a #\c #\b)
    (#\a #\d #\c #\b)
    (#\c #\d #\a #\b)
    (#\d #\c #\a #\b)

    (#\d #\c #\b #\a)
    (#\c #\d #\b #\a)
    (#\b #\d #\c #\a)
    (#\d #\b #\c #\a)
    (#\c #\b #\d #\a)
    (#\b #\c #\d #\a))
#+end_src

*** TODO Single-track Reflected ("Gray Code")
#+name: n-4-single-track-reflected
#+begin_src lisp
  '((#\a #\b #\c #\d)
    (#\a #\c #\b #\d)
    (#\b #\c #\a #\d)
    (#\c #\b #\a #\d)
    (#\c #\a #\b #\d)
    (#\b #\a #\c #\d)

    (#\b #\c #\d #\a)
    (#\c #\b #\d #\a)
    (#\c #\a #\d #\b)
    (#\b #\a #\d #\c)
    (#\a #\b #\d #\c)
    (#\a #\c #\d #\b)

    (#\c #\d #\a #\b)
    (#\b #\d #\a #\c)
    (#\a #\d #\b #\c)
    (#\a #\d #\c #\b)
    (#\b #\d #\c #\a)
    (#\c #\d #\b #\a)

    (#\d #\a #\b #\c)
    (#\d #\a #\c #\b)
    (#\d #\b #\c #\a)
    (#\d #\c #\b #\a)
    (#\d #\c #\a #\b)
    (#\d #\b #\a #\c))
#+end_src
*** others
#+name: n-4-template
#+begin_src lisp
  '((#\a #\b #\c #\d)
    (#\a #\b #\c #\d)
    (#\a #\b #\c #\d)
    (#\a #\b #\c #\d)
    (#\a #\b #\c #\d)
    (#\a #\b #\c #\d)
    (#\a #\b #\c #\d)
    (#\a #\b #\c #\d)
    (#\a #\b #\c #\d)
    (#\a #\b #\c #\d)
    (#\a #\b #\c #\d)
    (#\a #\b #\c #\d)
    (#\a #\b #\c #\d)
    (#\a #\b #\c #\d)
    (#\a #\b #\c #\d)
    (#\a #\b #\c #\d)
    (#\a #\b #\c #\d)
    (#\a #\b #\c #\d)
    (#\a #\b #\c #\d)
    (#\a #\b #\c #\d)
    (#\a #\b #\c #\d)
    (#\a #\b #\c #\d)
    (#\a #\b #\c #\d)
    (#\a #\b #\c #\d))
#+end_src

** TODO With repetitions
* [0/1] Combinations
:PROPERTIES:
:COOKIE_DATA: todo recursive
:END:

** TODO
